@using AirplaneBookingSystem.BlazorClient.Dto
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using Blazor.SubtleCrypto

@inject ICryptoService Crypto
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService
@inject IModalService ModalService

<ModalBody>
    <Card Class="auth-form" Shadow="Shadow.Default" Margin="Margin.Is5.OnY">
        <CardHeader>
            <Div Flex="Flex.AlignContent.Center">
                <Text>
                    Log In
                </Text>
            </Div>
        </CardHeader>
        <CardBody>
            <Form>
                <Field>
                    <FieldLabel>
                        Username
                    </FieldLabel>
                    <FieldBody>
                        <TextEdit Placeholder="Username"
                                  @bind-Text="@_userDto.Login" />
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>
                        Password
                    </FieldLabel>
                    <FieldBody>
                        <TextEdit Placeholder="Password"
                                  Role="TextRole.Password"
                                  autocomplete="new-password"
                                  @bind-Text="@_userDto.Password" />
                    </FieldBody>
                </Field>
                <Field>
                    <Button Color="Color.Primary"
                            Block
                            Clicked="LoginHandle">
                        Log In
                    </Button>
                </Field>
            </Form>
        </CardBody>
    </Card>
</ModalBody>

@code {
    [Parameter]
    public Action? OnAuth { get; set; }

    private UserDto _userDto = new();

    private async Task LoginHandle()
    { 
        var requestResult = await HttpClient.PostAsJsonAsync($"{Configuration["ApiServerUrl"]}/token", _userDto);

        if (!requestResult.IsSuccessStatusCode)
        {
            await NotificationService.Error("Failed to log in. Ensure your login and password are correct");
            return;
        }

        var token = await requestResult.Content.ReadAsStringAsync();

        await LocalStorage.SetItemAsync("token", token);

        await AuthStateProvider.GetAuthenticationStateAsync();
        await ModalService.Hide();

        if (OnAuth is not null)
            OnAuth();
    }
}